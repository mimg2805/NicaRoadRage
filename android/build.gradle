static def getDate() {
    return new Date().format("yyyyMMdd").toInteger()
}

android {
    // kotlinOptions.useIR = true
    compileSdk 35
    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            java.srcDirs = ["src"]
            aidl.srcDirs = ["src"]
            renderscript.srcDirs = ["src"]
            res.srcDirs = ["res"]
            assets.srcDirs = ["assets"]
            jniLibs.srcDirs = ["libs"]
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/robovm/ios/robovm.xml']
        }
    }
    defaultConfig {
        applicationId "com.marcosmiranda.nicaroadrage"
        minSdkVersion 23
        targetSdkVersion 35

        versionCode getDate()
        versionName version
        // versionName version + "-" + getDate()
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    namespace "com.marcosmiranda.nicaroadrage"
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.configureEach { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn "copyAndroidNatives"
    }
}

tasks.register('run', Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty("sdk.dir")
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", "shell", "am", "start", "-n", "com.marcosmiranda.nicaroadrage/com.marcosmiranda.nicaroadrage.AndroidLauncher"
}

dependencies {
    implementation "com.google.android.gms:play-services-ads:23.1.0" // Ads
}
